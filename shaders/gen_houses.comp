#version 430

layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

const uvec3 CELL_SIZE = uvec3(8, 4, 8);
const uvec3 OUTPUT_SIZE = uvec3(128, 128, 128);
const uvec3 OUTPUT_SIZE_GROUP = gl_WorkGroupSize - uvec3(1);
const uvec3 OUTPUT_OFFSET_GROUP = uvec3(0, 1, 0);
const uvec3 NUM_GROUPS = OUTPUT_SIZE / CELL_SIZE;
const uvec3 MIN_SIZE = uvec3(2, 1, 2);

layout (std430, binding = 0) restrict buffer voxel_buffer {
    uvec2 voxels[];
};

layout (binding = 0) uniform atomic_uint voxel_counter;

float rand(vec2 v) {
    return fract(sin(dot(v, vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
    float r = rand(vec2(
        dot(
            vec3(gl_LocalInvocationID + OUTPUT_SIZE_GROUP * gl_WorkGroupID),
            vec3(1.0, NUM_GROUPS.x, NUM_GROUPS.x * NUM_GROUPS.y)
        ),
        1.5
    ));
    uvec3 offset = uvec3(rand(vec2(r, 0.0)) * float(CELL_SIZE.x * CELL_SIZE.y * CELL_SIZE.z), 0, 0);
    offset.z = bitfieldExtract(offset.x, 5, 3);
    offset.y = bitfieldExtract(offset.x, 3, 2);
    offset.x = bitfieldExtract(offset.x, 0, 3);
    offset += (gl_LocalInvocationID + OUTPUT_SIZE_GROUP * gl_WorkGroupID) * CELL_SIZE;

    uvec3 size = uvec3(rand(vec2(r, 0.0)) * float(CELL_SIZE.x * CELL_SIZE.y * CELL_SIZE.z), 0, 0);
    size.z = bitfieldExtract(size.x, 5, 3);
    size.y = bitfieldExtract(size.x, 3, 2);
    size.x = bitfieldExtract(size.x, 0, 3);
    size = max(MIN_SIZE, size);
    
    if (all(greaterThanEqual(gl_LocalInvocationID, OUTPUT_OFFSET_GROUP)) &&
            all(lessThan(gl_LocalInvocationID, OUTPUT_SIZE + OUTPUT_OFFSET_GROUP))) {
        for (uint dx = 0; dx < size.x; dx++) {
            for (uint dy = 0; dy < size.y; dy++) {
                for (uint dz = 0; dz < size.z; dz++) {
                    uvec3 offset1 = offset + uvec3(dx, dy, dz) - OUTPUT_OFFSET_GROUP * CELL_SIZE;
                    if (all(lessThan(offset1, OUTPUT_SIZE))) {
                        offset1.yz *= uvec2(OUTPUT_SIZE.x, OUTPUT_SIZE.x * OUTPUT_SIZE.y);
                        uint index = atomicCounterIncrement(voxel_counter);
                        voxels[index] = uvec2(offset1.x + offset1.y + offset1.z, 0x0000ff);
                    }
                }
            }
        }
    }
}
